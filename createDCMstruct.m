% This batch script analyses the Attention to Visual Motion fMRI dataset
% available from the SPM website using DCM:
%   http://www.fil.ion.ucl.ac.uk/spm/data/attention/
% as described in the SPM manual:
%   http://www.fil.ion.ucl.ac.uk/spm/doc/spm12_manual.pdf#Chap:DCM_fmri
%__________________________________________________________________________
% Copyright (C) 2014 Wellcome Trust Centre for Neuroimaging

% Guillaume Flandin & Peter Zeidman
% $Id: dcm_spm12_batch.m 12 2014-09-29 19:58:09Z guillaume $


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DYNAMIC CAUSAL MODELLING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function createDCMstruct(subjectPath,runName)
    % SPECIFICATION DCMs "attentional modulation of backward/forward connection"
    %--------------------------------------------------------------------------
    % To specify a DCM, you might want to create a template one using the GUI
    % then use spm_dcm_U.m and spm_dcm_voi.m to insert new inputs and new
    % regions. The following code creates a DCM file from scratch, which
    % involves some technical subtleties and a deeper knowledge of the DCM
    % structure.
    
    % Create results folder
    %--------------------------------------------------------------------------
    mkdir(fullfile(subjectPath,'DCM'));
    
    % Load SPM struct generated by GLM
    %--------------------------------------------------------------------------
    SPM = load(fullfile(subjectPath,'GLM',runName,'SPM.mat'));
    SPM = SPM.SPM;

    % Load regions of interest
    %--------------------------------------------------------------------------
    vois = dir(fullfile(subjectPath,'GLM',runName,'VOI*.mat'));
    
    for n=1:numel(vois)
       xYStruct = load(fullfile(vois(n).folder,vois(n).name),'xY');
       DCM.xY(n) = xYStruct.xY;
    end

    DCM.n = length(DCM.xY);      % number of regions
    DCM.v = length(DCM.xY(1).u); % number of time points

    % Time series
    %--------------------------------------------------------------------------
    DCM.Y.dt  = SPM.xY.RT;
    DCM.Y.X0  = DCM.xY(1).X0;
    for i = 1:DCM.n
        DCM.Y.y(:,i)  = DCM.xY(i).u;
        DCM.Y.name{i} = DCM.xY(i).name;
    end

    DCM.Y.Q    = spm_Ce(ones(1,DCM.n)*DCM.v);

    % Experimental inputs
    %--------------------------------------------------------------------------
    DCM.U.dt   =  SPM.Sess.U(1).dt;
    DCM.U.name = [SPM.Sess.U.name];
    DCM.U.u    = [SPM.Sess.U.u];

    % DCM parameters and options
    %--------------------------------------------------------------------------
    DCM.delays = repmat(SPM.xY.RT/2,DCM.n,1);
    DCM.TE     = 0.04;

    DCM.options.nonlinear  = 0;
    DCM.options.two_state  = 0;
    DCM.options.stochastic = 0;
    DCM.options.nograph    = 1;

    
    % Connectivity matrices specifications
    %--------------------------------------------------------------------------
    nDCMs = 1;
    nInputs = numel(DCM.U.name);
    
    MPFCidx = find(contains({vois.name},'MPFC'));
    PRECidx = find(contains({vois.name},'PREC'));
    LTPJidx = find(contains({vois.name},'LTPJ'));
    RTPJidx = find(contains({vois.name},'RTPJ'));
    
    % Fully connected DCM with MPFC and PREC as driving input regions
    connectivityMatrices(nDCMs).a = ones(DCM.n,DCM.n)-diag(ones(DCM.n,1));
    for n=1:nInputs
        connectivityMatrices(nDCMs).b(:,:,n) = ones(DCM.n,DCM.n)-diag(ones(DCM.n,1));
    end
    connectivityMatrices(nDCMs).c = zeros(DCM.n,nInputs);
    connectivityMatrices(nDCMs).c(MPFCidx,:) = ones(1,nInputs);
    connectivityMatrices(nDCMs).c(PRECidx,:) = ones(1,nInputs);
    connectivityMatrices(nDCMs).d = zeros(DCM.n,DCM.n,0);   % not needed (only for nonlinear DCM)  
    
    % Analog to example above, define more DCMs!
    % Note: need to verify which matrix entry is which direction! 
    % (from row region to column region?)
%     nDCMs = nDCMs + 1;
%     
%     connectivityMatrices(nDCMs).a = 
%     connectivityMatrices(nDCMs).b = 
%     connectivityMatrices(nDCMs).c = 
%     connectivityMatrices(nDCMs).d = 
%     
%     nDCMs = nDCMs + 1;
    
    
    % Save resulting DCM structs
    %--------------------------------------------------------------------------
    for n=1:nDCMs
        DCM.a = connectivityMatrices(n).a;
        DCM.b = connectivityMatrices(n).b;
        DCM.c = connectivityMatrices(n).c;
        DCM.d = connectivityMatrices(n).d;
        save(fullfile(subjectPath,'DCM',['DCM_',num2str(n,'%02d'),'.mat']),'DCM');
    end 
    

    % For later:
%     
%     % DCM Estimation
%     %--------------------------------------------------------------------------
% 
%     matlabbatch{1}.spm.dcm.fmri.estimate.dcmmat = {...
%         fullfile(data_path,'GLM','DCM_mod_bwd.mat'); ...
%         fullfile(data_path,'GLM','DCM_mod_fwd.mat')};
% 
%     spm_jobman('run',matlabbatch);
% 
%     % Bayesian Model Comparison
%     %--------------------------------------------------------------------------
%     DCM_bwd = load('DCM_mod_bwd.mat','F');
%     DCM_fwd = load('DCM_mod_fwd.mat','F');
%     fprintf('Model evidence: %f (bwd) vs %f (fwd)\n',DCM_bwd.F,DCM_fwd.F);
%     
end
